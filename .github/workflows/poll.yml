# ========================================
# Discord VC 定期監視 ワークフロー
# ========================================
# 概要: Discord VCチャンネルの参加者を定期的に監視し、Google Sheetsに記録する
#       1日3回（日本時間 9:00, 15:00, 21:00）自動実行
#       VCメンバーの変更があればSlackに通知（オプション）
#       手動実行も可能で、デバッグモード付き
# ========================================

name: Discord VC 定期監視  # GitHub Actionsのワークフロー名（Actions画面で表示される名前）

on:  # このワークフローが実行されるタイミングの定義
  schedule:  # 定期的な自動実行の設定
    # 日本時間で毎日 9:00, 15:00, 21:00 に実行
    # UTC時間で 0:00, 6:00, 12:00
    - cron: '0 0,6,12 * * *'  # cron形式：分 時 日 月 曜日（*は全て）
    # cron形式の説明：
    # - '0': 0分（毎時の0分）
    # - '0,6,12': UTC時間の0時、6時、12時
    # - '* * *': 毎日、毎月、全曜日

  # 手動実行も可能にする
  workflow_dispatch:  # GitHub Actions画面から手動で実行できるようにする設定
    inputs:  # 手動実行時に選択できるパラメータの定義
      debug_enabled:  # デバッグモードパラメータ
        description: 'デバッグログを有効化'  # パラメータの説明文
        required: false  # オプショナルパラメータ（必須ではない）
        default: 'false'  # デフォルトはOFF（通常モード）

jobs:  # 実行するジョブ（作業単位）の定義
  poll:  # ジョブID（一意の識別子）
    runs-on: ubuntu-latest  # Ubuntu最新版の仮想環境で実行
    timeout-minutes: 10  # 10分でタイムアウト（無限ループ防止）
    
    steps:  # ジョブ内で実行するステップ（作業手順）の定義
    - name: コードをチェックアウト  # ステップ1: リポジトリのコードを取得
      uses: actions/checkout@v4  # GitHub公式のチェックアウトアクションv4を使用

    - name: Pythonセットアップ  # ステップ2: Python環境の準備
      uses: actions/setup-python@v5  # Python公式のセットアップアクションv5を使用
      with:  # アクションのパラメータ設定
        python-version: '3.11'  # Python 3.11を使用
        cache: 'pip'  # pipの依存関係をキャッシュして高速化

    - name: 依存関係インストール  # ステップ3: 必要なPythonパッケージをインストール
      run: |  # シェルコマンドを実行
        python -m pip install --upgrade pip  # pipを最新版にアップグレード
        pip install -r requirements.txt  # requirements.txtに記載されたパッケージをインストール

    - name: サービスアカウントJSON作成  # ステップ4: Google認証用のJSONファイルを作成
      env:  # 環境変数の設定
        GOOGLE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_BASE64 }}  # Base64形式の認証情報（GitHub Secretsから取得）
      run: |  # シェルコマンドを実行
        echo "$GOOGLE_SERVICE_ACCOUNT_JSON_BASE64" | base64 -d > service_account.json  # Base64をデコードしてJSONファイルに保存
        # セキュリティ: ファイル権限を制限（所有者のみ読み書き可能）
        chmod 600 service_account.json  # 600 = 所有者のみ読み書き可能
    
    - name: 機密情報をマスク  # ステップ5: ログに機密情報が表示されないようにする
      run: |  # シェルコマンドを実行
        # GitHub Actionsのログで機密情報をマスク（***で表示される）
        echo "::add-mask::${{ secrets.DISCORD_BOT_TOKEN }}"  # Discord Botトークンをマスク
        echo "::add-mask::${{ secrets.SLACK_BOT_TOKEN }}"  # Slack Botトークンをマスク
        echo "::add-mask::${{ secrets.SLACK_CHANNEL_ID }}"  # SlackチャンネルIDをマスク

    - name: 監視スクリプト実行  # ステップ6: メインの監視処理を実行
      env:  # 環境変数の設定（プログラムで使用する設定値）
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}  # Discord Botトークン（GitHub Secretsから取得）
        GOOGLE_SHEET_NAME: ${{ secrets.GOOGLE_SHEET_NAME }}  # Google Sheetsの名前（GitHub Secretsから取得）
        GOOGLE_SERVICE_ACCOUNT_JSON: service_account.json  # 認証用JSONファイルのパス
        ALLOWED_VOICE_CHANNEL_IDS: ${{ secrets.ALLOWED_VOICE_CHANNEL_IDS }}  # 監視対象のVCチャンネルID（カンマ区切り）
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}  # Slack Botトークン（オプション）
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}  # SlackチャンネルID（オプション）
        TZ: Asia/Tokyo  # タイムゾーンを日本時間に設定
        LOG_LEVEL: ${{ github.event.inputs.debug_enabled == 'true' && '1' || '2' }}  # デバッグモード: 1=詳細、2=通常
      run: |  # シェルコマンドを実行
        python poll_once.py  # VCメンバーを監視してGoogle Sheetsに記録するPythonスクリプトを実行
    
    - name: クリーンアップ
      if: always()  # 常に実行
      run: |
        # 機密ファイルを削除
        rm -f service_account.json
    
    # エラー通知（オプション）
    - name: 失敗時に通知
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      run: |
        # エラー通知スクリプト（別途作成が必要）
        echo "Polling failed at $(date)"
        # python notify_error.py  # エラー通知スクリプトがある場合