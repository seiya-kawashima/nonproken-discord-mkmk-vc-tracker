name: 日次集計処理（本番環境）

on:
  schedule:
    # JST 月〜土 7:00に実行（日曜除外）
    # UTC 日〜金 22:00 = JST 月〜土 7:00
    # cron式: 分 時 日 月 曜日（0:日曜、1:月曜...6:土曜）
    - cron: '0 22 * * 0-5'    # UTC日〜金22:00 = JST月〜土7:00
  workflow_dispatch:  # 手動実行も可能

jobs:
  daily-aggregate:
    name: 日次集計処理
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4

    - name: Pythonセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 依存パッケージのインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 実行日時の確認
      run: |
        python << 'EOF'
        from datetime import datetime
        import pytz

        # JSTで現在の日付を取得
        jst = pytz.timezone('Asia/Tokyo')
        today = datetime.now(jst)
        weekday_names = ['月', '火', '水', '木', '金', '土', '日']

        print(f"JST現在時刻: {today.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"今日は{weekday_names[today.weekday()]}曜日です")
        print("日次集計処理を開始します")
        EOF

    - name: ユーザー名マッピングの自動更新
      env:
        DISCORD_BOT_TOKEN_0_PRD: ${{ secrets.DISCORD_BOT_TOKEN_0_PRD }}
        GOOGLE_SERVICE_ACCOUNT_JSON_BASE64_0_PRD: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_BASE64_0_PRD }}
        GOOGLE_SHARED_DRIVE_ID_0_PRD: ${{ secrets.GOOGLE_SHARED_DRIVE_ID_0_PRD }}
      run: |
        echo "ユーザー名マッピングを自動更新します"
        python auto_update_mapping.py --env 0

    - name: 日次集計処理（本番環境）
      env:
        DISCORD_BOT_TOKEN_0_PRD: ${{ secrets.DISCORD_BOT_TOKEN_0_PRD }}
        GOOGLE_SERVICE_ACCOUNT_JSON_BASE64_0_PRD: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_BASE64_0_PRD }}
        GOOGLE_SHARED_DRIVE_ID_0_PRD: ${{ secrets.GOOGLE_SHARED_DRIVE_ID_0_PRD }}
        DISCORD_VOICE_CHANNEL_IDS_0_PRD: ${{ secrets.DISCORD_VOICE_CHANNEL_IDS_0_PRD }}
        SLACK_BOT_TOKEN_0_PRD: ${{ secrets.SLACK_BOT_TOKEN_0_PRD }}
        SLACK_CHANNEL_ID_0_PRD: ${{ secrets.SLACK_CHANNEL_ID_0_PRD }}
      run: |
        echo "本番環境で日次集計処理を実行します"
        python slack_notifier_attendance.py --env 0

    - name: 実行結果の通知（成功）
      if: success()
      run: |
        echo "✅ 日次集計処理が正常に完了しました（本番環境）"
        echo "Slackに通知が送信されました"

    - name: 実行結果の通知（失敗）
      if: failure()
      run: |
        echo "❌ 日次集計処理中にエラーが発生しました（本番環境）"
        echo "エラーログを確認してください"


    - name: ログファイルのアップロード（エラー時）
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          logs/
        retention-days: 7