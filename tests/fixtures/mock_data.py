"""
„ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„ÇøÂÆöÁæ©
"""
from datetime import datetime, timedelta  # Êó•ÊôÇÊìç‰ΩúÁî®„É©„Ç§„Éñ„É©„É™
from typing import List, Dict, Any  # Âûã„Éí„É≥„ÉàÁî®


class MockInputData:
    """„ÉÜ„Çπ„ÉàÂÖ•ÂäõÁî®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇØ„É©„ÇπÔºàÂõ∫ÂÆöÂÄ§Ôºâ"""

    # Discord VC„É°„É≥„Éê„Éº„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø
    @staticmethod
    def get_mock_members() -> List[Dict[str, Any]]:
        """Discord VC„ÅÆÊì¨‰ºº„É°„É≥„Éê„ÉºÊÉÖÂ†±„ÇíËøî„Åô"""
        return [
            {
                "id": "123456789",  # „É¶„Éº„Ç∂„ÉºID
                "name": "Áî∞‰∏≠Â§™ÈÉé",  # „É¶„Éº„Ç∂„ÉºÂêç
                "display_name": "Áî∞‰∏≠",  # Ë°®Á§∫Âêç
                "joined_at": "2025-01-18 10:00:00",  # VCÂèÇÂä†ÊôÇÂàª
                "status": "online"  # „Ç™„É≥„É©„Ç§„É≥„Çπ„ÉÜ„Éº„Çø„Çπ
            },
            {
                "id": "987654321",
                "name": "‰ΩêËó§Ëä±Â≠ê",
                "display_name": "‰ΩêËó§",
                "joined_at": "2025-01-18 10:05:00",
                "status": "online"
            },
            {
                "id": "456789123",
                "name": "Èà¥Êú®‰∏ÄÈÉé",
                "display_name": "Èà¥Êú®",
                "joined_at": "2025-01-18 10:10:00",
                "status": "online"
            }
        ]

    # CSV„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éá„Éº„ÇøÔºàÊó¢Â≠ò„ÅÆÂá∫Â∏≠Ë®òÈå≤Ôºâ
    @staticmethod
    def get_template_csv() -> str:
        """Êó¢Â≠ò„ÅÆCSV„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éá„Éº„ÇøÔºà„ÉÜ„Çπ„ÉàÂÖ•ÂäõÁî®Ôºâ"""
        return """Êó•‰ªò,Áî∞‰∏≠,‰ΩêËó§,Èà¥Êú®
2025-01-13,0,0,0
2025-01-14,1,0,1
2025-01-15,1,0,1
2025-01-16,1,1,0
2025-01-17,0,1,1"""

    # Êú¨Êó•Ôºà2025-01-18Ôºâ„ÅÆ„É°„É≥„Éê„ÉºÂá∫Â∏≠„Éá„Éº„Çø
    @staticmethod
    def get_today_members() -> List[str]:
        """Êú¨Êó•„ÅÆVCÂèÇÂä†„É°„É≥„Éê„Éº„É™„Çπ„ÉàÔºàÂÖ•ÂäõÁî®Ôºâ"""
        return ["Áî∞‰∏≠", "‰ΩêËó§", "Èà¥Êú®"]

    # ÈõÜË®àÁî®„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÔºà1ÈÄ±ÈñìÂàÜÔºâ
    @staticmethod
    def get_aggregation_test_csv() -> str:
        """ÈõÜË®à„ÉÜ„Çπ„ÉàÁî®„ÅÆCSV„Éá„Éº„ÇøÔºà1ÈÄ±ÈñìÂàÜ„ÅÆÂÖ•ÂäõÔºâ"""
        return """Êó•‰ªò,Áî∞‰∏≠,‰ΩêËó§,Èà¥Êú®,Â±±Áî∞
2025-01-13,1,0,1,1
2025-01-14,1,0,1,0
2025-01-15,1,1,0,1
2025-01-16,1,1,0,1
2025-01-17,0,1,1,0
2025-01-18,1,1,1,0"""



class ExpectedData:
    """„ÉÜ„Çπ„ÉàÁµêÊûúÊ§úË®ºÁî®„ÅÆÊúüÂæÖÂÄ§„Éá„Éº„Çø„ÇØ„É©„Çπ"""

    # Êñ∞Ë¶è„É°„É≥„Éê„Éº„ÅåËøΩÂä†„Åï„Çå„ÅüÂæå„ÅÆÊúüÂæÖ„Åï„Çå„ÇãCSV„Éá„Éº„Çø
    @staticmethod
    def get_csv_after_append() -> str:
        """„É°„É≥„Éê„ÉºËøΩÂä†Âæå„ÅÆÊúüÂæÖ„Åï„Çå„ÇãCSV„Éá„Éº„Çø"""
        return """Êó•‰ªò,Áî∞‰∏≠,‰ΩêËó§,Èà¥Êú®
2025-01-13,0,0,0
2025-01-14,1,0,1
2025-01-15,1,0,1
2025-01-16,1,1,0
2025-01-17,0,1,1
2025-01-18,1,1,1"""

    # ÊúüÂæÖ„Åï„Çå„Çã„É°„É≥„Éê„Éº„É™„Çπ„ÉàÔºàDiscord VC„Åã„ÇâÂèñÂæóÔºâ
    @staticmethod
    def get_member_names() -> List[str]:
        """ÊúüÂæÖ„Åï„Çå„Çã„É°„É≥„Éê„ÉºÂêç„É™„Çπ„Éà"""
        return ["Áî∞‰∏≠", "‰ΩêËó§", "Èà¥Êú®"]

    # ÊúüÂæÖ„Åï„Çå„ÇãSlackÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏
    @staticmethod
    def get_expected_slack_message() -> str:
        """ÊúüÂæÖ„Åï„Çå„ÇãSlackÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏"""
        # ÂúüÊó•Á•ù„ÇíÈô§„ÅÑ„ÅüÈÄ£Á∂öÂá∫Â∏≠Êó•Êï∞„ÅÆË®àÁÆó
        # 1/13(Êúà):‰ºë„Åø, 1/14(ÁÅ´):Áî∞‰∏≠‚óãÈà¥Êú®‚óã, 1/15(Ê∞¥):Áî∞‰∏≠‚óãÈà¥Êú®‚óã,
        # 1/16(Êú®):Áî∞‰∏≠‚óã‰ΩêËó§‚óã, 1/17(Èáë):‰ΩêËó§‚óãÈà¥Êú®‚óã, 1/18(Âúü):ÂÖ®Âì°‚óã
        return """üìä „Äê2025-01-18 „ÇÇ„Åè„ÇÇ„Åè‰ºö Âá∫Â∏≠Áµ±Ë®à„Äë üìä

üéä Êú¨Êó•„ÅÆÂá∫Â∏≠ËÄÖ: 3Âêç

üë§ Áî∞‰∏≠
  ‚îú Á¥ØË®àÂá∫Â∏≠: 4Êó•
  ‚îî ÈÄ£Á∂öÂá∫Â∏≠: 3Êó• üî•üî•üî•

üë§ ‰ΩêËó§
  ‚îú Á¥ØË®àÂá∫Â∏≠: 3Êó•
  ‚îî ÈÄ£Á∂öÂá∫Â∏≠: 2Êó• üî•üî•

üë§ Èà¥Êú®
  ‚îú Á¥ØË®àÂá∫Â∏≠: 4Êó•
  ‚îî ÈÄ£Á∂öÂá∫Â∏≠: 1Êó• üî•

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ú® Á¥†Êô¥„Çâ„Åó„ÅÑÁ∂ôÁ∂ö„Åß„ÅôÔºÅ„Åø„Çì„Å™„ÅßÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ"""

    # Discord Bot„Éà„Éº„ÇØ„É≥„ÅÆ„É¢„ÉÉ„ÇØÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    @staticmethod
    def get_mock_bot_token() -> str:
        """„ÉÜ„Çπ„ÉàÁî®„ÅÆBot„Éà„Éº„ÇØ„É≥ÔºàÂÆüÈöõ„Å´„ÅØ‰ΩøÁî®„Åï„Çå„Å™„ÅÑÔºâ"""
        return "MOCK_BOT_TOKEN_FOR_TESTING_ONLY"


    # ÊúüÂæÖ„Åï„Çå„ÇãSlack„ÅÆÁµ±Ë®à„Éá„Éº„ÇøËæûÊõ∏
    @staticmethod
    def get_stats_dict() -> Dict[str, Dict[str, Any]]:
        """Áµ±Ë®àÊÉÖÂ†±„ÅÆËæûÊõ∏ÂΩ¢Âºè„Éá„Éº„Çø"""
        return {
            "Áî∞‰∏≠": {
                "total_days": 4,  # Á¥ØË®àÂá∫Â∏≠Êó•Êï∞
                "consecutive_days": 3,  # ÈÄ£Á∂öÂá∫Â∏≠Êó•Êï∞ÔºàÂúüÊó•Á•ùÈô§„ÅèÔºâ
                "last_attended": "2025-01-18"  # ÊúÄÁµÇÂá∫Â∏≠Êó•
            },
            "‰ΩêËó§": {
                "total_days": 3,
                "consecutive_days": 2,
                "last_attended": "2025-01-18"
            },
            "Èà¥Êú®": {
                "total_days": 4,
                "consecutive_days": 1,
                "last_attended": "2025-01-18"
            }
        }

    # ÊúüÂæÖ„Åï„Çå„Çã„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÔºàÂá∫Â∏≠Â±•Ê≠¥Ôºâ
    @staticmethod
    def get_user_data() -> Dict[str, Dict[str, Any]]:
        """„É¶„Éº„Ç∂„ÉºÂà•„ÅÆÂá∫Â∏≠Â±•Ê≠¥„Éá„Éº„Çø"""
        return {
            "Áî∞‰∏≠": {
                "dates": ["2025-01-14", "2025-01-15", "2025-01-16", "2025-01-18"],
                "total": 4,
                "consecutive": 3
            },
            "‰ΩêËó§": {
                "dates": ["2025-01-15", "2025-01-16", "2025-01-17", "2025-01-18"],
                "total": 3,
                "consecutive": 2
            },
            "Èà¥Êú®": {
                "dates": ["2025-01-13", "2025-01-14", "2025-01-17", "2025-01-18"],
                "total": 4,
                "consecutive": 1
            }
        }