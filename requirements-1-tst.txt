# ========================================
# テスト環境用 依存パッケージ定義ファイル (requirements-tst.txt)
# ========================================
# 概要: プログラムのテストを実行するために必要なライブラリのリスト
#       単体テスト、カバレッジ測定、コード品質チェックツールを含む
#
# なぜこのファイルが必要？:
#   - テスト専用のライブラリを本番環境にインストールしないため
#   - テスト環境でのみ必要なツールを明確に分離
#   - CI/CD環境でテストを自動実行するため
#   - コード品質を保つためのツールを統一管理
#
# 使い方:
#   pip install -r requirements.txt -r requirements-tst.txt
#   (本番用とテスト用の両方をインストール)
#
# 注意: 本番環境ではこのファイルはインストール不要
# ========================================

# ====================
# テストフレームワーク
# ====================
pytest>=7.4.0  # Pythonの標準的なテストフレームワーク（テストの実行と管理用）
pytest-cov>=4.1.0  # テストカバレッジを測定するプラグイン（テストがコードの何%をカバーしているか確認）
pytest-mock>=3.11.1  # モック機能を提供するプラグイン（外部サービスを模擬してテスト）
pytest-asyncio>=0.21.0  # 非同期処理のテストをサポート（Discord.pyなどの非同期コードのテスト用）

# ====================
# カバレッジ測定
# ====================
coverage[toml]>=7.2.7  # コードカバレッジを詳細に測定するツール（テストの網羅性を数値化）
codecov>=2.1.13  # カバレッジレポートをCodecovサービスにアップロード（GitHub上でカバレッジを可視化）

# ====================
# コード品質チェックツール
# ====================
black>=23.3.0  # Pythonコードを自動整形するツール（コードスタイルを統一）
flake8>=6.0.0  # コードの文法エラーやスタイル違反をチェック（PEP8準拠の確認）
mypy>=1.4.1  # 静的型チェックツール（型ヒントが正しいか確認）
isort>=5.12.0  # import文を自動整理するツール（import文の順序を統一）

# ====================
# テスト補助ユーティリティ
# ====================
faker>=18.13.0  # テスト用のダミーデータを生成（ユーザー名、メールアドレスなどの偽データ作成）
freezegun>=1.2.2  # テスト時に時間を固定するツール（時間依存のテストを安定化）
responses>=0.23.1  # HTTPリクエストをモック化するツール（外部APIのテスト用）